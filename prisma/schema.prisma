// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String      @id @default(uuid())
  clerkId     String      @unique
  name        String
  description String?
  
  // Pinecone configuration
  pineconeIndex String      // Name of the Pinecone index

  // Add subscription relation
  subscription Subscription?
  
  // Relationships
  users       User[]
  ontologies  Ontology[]
  
  // Add this line
  customNodeTypes CustomNodeType[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("organizations")
}

model User {
  id             String       @id @default(uuid())
  clerkId        String      @unique
  email          String       @unique
  name           String
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("users")
}

model Ontology {
  id            String       @id @default(uuid())
  name          String
  description   String?
  
  // Relationships
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  
  nodes         Node[]
  relationships NodeRelationship[]
  notes         Note[]
  
  // Self-referential many-to-many relationship for linked ontologies
  linkedFrom    OntologyLink[] @relation("LinkedFrom")
  linkedTo      OntologyLink[] @relation("LinkedTo")
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("ontologies")
}

model OntologyLink {
  id            String   @id @default(uuid())
  fromOntology  Ontology @relation("LinkedFrom", fields: [fromOntologyId], references: [id])
  fromOntologyId String
  toOntology    Ontology @relation("LinkedTo", fields: [toOntologyId], references: [id])
  toOntologyId  String
  description   String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([fromOntologyId, toOntologyId])
  @@map("ontology_links")
}

model CustomNodeType {
  id            String    @id @default(uuid())
  name          String    
  description   String?
	hexColor      String
  isSystem      Boolean   @default(false)  // To distinguish between system-defined and custom types
  isDeprecated  Boolean   @default(false)  // Instead of deletion, we mark as deprecated

  
  // Relationship to Organization (each org can have their own custom types)
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  
  // Reference from nodes
  nodes         Node[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([organizationId, name])
  @@map("custom_node_types")
}

model Node {
  id            String       @id @default(uuid())
  type          CustomNodeType @relation(fields: [typeId], references: [id])
  typeId        String
  name          String
  description   String?
  metadata      Json?
  vectorId      String?
  
  // Add relationship to Ontology
  ontology      Ontology    @relation(fields: [ontologyId], references: [id])
  ontologyId    String
  
  // Relationships
  fromRelations NodeRelationship[] @relation("FromNode")
  toRelations   NodeRelationship[] @relation("ToNode")
  notes         Note[]

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("nodes")
}

model NodeRelationship {
  id            String   @id @default(uuid())
  fromNode      Node     @relation("FromNode", fields: [fromNodeId], references: [id])
  fromNodeId    String
  toNode        Node     @relation("ToNode", fields: [toNodeId], references: [id])
  toNodeId      String
  relationType  String
  vectorId      String?
  
  // Add relationship to Ontology
  ontology      Ontology @relation(fields: [ontologyId], references: [id])
  ontologyId    String
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([fromNodeId, toNodeId, relationType])
  @@map("node_relationships")
}

model Note {
  id          String    @id @default(uuid())
  content     String
  author      String
  node        Node      @relation(fields: [nodeId], references: [id])
  nodeId      String
  vectorId    String?
  
  // Add relationship to Ontology
  ontology    Ontology  @relation(fields: [ontologyId], references: [id])
  ontologyId  String
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("notes")
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  TRIALING
  PAUSED
}

enum SubscriptionPlan {
  FREE_TRIAL
  PRO
  ENTERPRISE
}

model Subscription {
  id              String            @id @default(uuid())
  organization    Organization      @relation(fields: [organizationId], references: [id])
  organizationId  String           @unique
  
  // Plan details
  plan           SubscriptionPlan
  status         SubscriptionStatus
  
  // Stripe-specific fields
  stripeCustomerId      String     
  stripeSubscriptionId  String      @unique
  stripePriceId        String      
  
  // Subscription details
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean     @default(false)
  canceledAt           DateTime?
  
  // Seats
  seats               Int          @default(5)
  
  // Limits based on plan (null means unlimited for Enterprise)
  ontologyLimit       Int?        
  nodesPerOntologyLimit Int?      
  relationshipsPerOntologyLimit Int?
  aiPromptsLimit      Int?        
  
  // Features
  features            Json         
  
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  @@map("subscriptions")
}

// Add usage tracking model
model OntologyUsage {
  id              String    @id @default(uuid())
  organizationId  String
  ontologyId      String
  nodeCount       Int       @default(0)
  relationshipCount Int     @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([organizationId, ontologyId])
  @@map("ontology_usage")
}

// Add AI prompts usage tracking
model AIPromptUsage {
  id              String    @id @default(uuid())
  organizationId  String		@unique
  count           Int       @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("ai_prompt_usage")
}
